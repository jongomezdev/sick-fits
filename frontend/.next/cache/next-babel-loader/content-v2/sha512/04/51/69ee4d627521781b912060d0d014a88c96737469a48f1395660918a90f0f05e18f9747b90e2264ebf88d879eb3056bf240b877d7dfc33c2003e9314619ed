{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    read: function read() {\n      var _data$allProductsMeta;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; // First thing it does it asks the read function\n      // for those items\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$allProductsMeta = data.allProductsMeta) === null || _data$allProductsMeta === void 0 ? void 0 : _data$allProductsMeta.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first);\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        console.log(\"\".concat(items.length));\n      }\n\n      return false;\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first;\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Jonathan Gomez/Desktop/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADmC,UAE3BG,IAF2B,GAEXJ,IAFW,CAE3BI,IAF2B;AAAA,UAErBC,KAFqB,GAEXL,IAFW,CAErBK,KAFqB,EAGnC;AACA;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,eAAT,0DAAG,sBAAuBD,KAArC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AAEA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B,eAAO,KAAP;AACD;;AACD,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBjB,QAAAA,OAAO,CAACC,GAAR,WAAeY,KAAK,CAACI,MAArB;AACD;;AACD,aAAO,KAAP;AACD,KApBI;AAqBLC,IAAAA,KArBK,iBAqBCrB,QArBD,EAqBWsB,QArBX,SAqB+B;AAAA,UAARrB,IAAQ,SAARA,IAAQ;AAAA,UAC1BI,IAD0B,GACVJ,IADU,CAC1BI,IAD0B;AAAA,UACpBC,KADoB,GACVL,IADU,CACpBK,KADoB;AAElC,UAAMiB,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ;AACA,aAAOA,MAAP;AACD;AA7BI,GAAP;AA+BD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField() {\r\n  return {\r\n    keyArgs: false,\r\n    read(existing = [], { args, cache }) {\r\n      console.log({ existing, args, cache });\r\n      const { skip, first } = args;\r\n      // First thing it does it asks the read function\r\n      // for those items\r\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n      const count = data?.allProductsMeta?.count;\r\n      const page = skip / first + 1;\r\n      const pages = Math.ceil(count / first);\r\n\r\n      const items = existing.slice(skip, skip + first).filter((x) => x);\r\n      if (items.length !== first) {\r\n        return false;\r\n      }\r\n      if (items.length) {\r\n        console.log(`${items.length}`);\r\n      }\r\n      return false;\r\n    },\r\n    merge(existing, incoming, { args }) {\r\n      const { skip, first } = args;\r\n      const merged = existing ? existing.slice(0) : [];\r\n      for (let i = skip; i < skip + incoming.length; ++i) {\r\n        merged[i] = incoming[i - skip];\r\n      }\r\n      console.log(merged);\r\n      return merged;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}